{"version":3,"file":"ButtonGroup.js","names":["React","forwardRef","useEffect","useMemo","useState","useTheme","isEqual","ButtonGroup","BasewebButtonGroup","MODE","BaseButton","BaseButtonKind","BaseButtonSize","DynamicIcon","ButtonGroupProto","FormClearHelper","jsx","_jsx","handleMultiSelection","index","currentSelection","includes","filter","value","handleSelection","mode","ClickMode","MULTI_SELECT","getSingleSelection","length","syncWithWidgetManager","selected","element","widgetMgr","fragmentId","fromUi","arguments","undefined","setIntArrayValue","getContentElement","content","size","iconValue","showAsSelected","selectionVisualization","clickMode","indexOf","SINGLE_SELECT","SelectionVisualization","ALL_UP_TO_SELECTED","getContent","isVisuallySelected","fallbackContent","selectionContent","createOptionChild","option","_option$content","selectedContent","buttonKind","BORDERLESS_ICON","BORDERLESS_ICON_ACTIVE","BaseButtonGroup","props","_","XSMALL","kind","children","getInitialValue","storedValue","getIntArrayValue","default","disabled","defaultValues","options","theme","setSelected","elementRef","useRef","selectedRef","formId","formClearHelper","manageFormClearListener","disconnect","valueString","JSON","stringify","parsedValue","parse","current","setValue","onClick","_event","newSelected","radio","checkbox","optionElements","map","Element","concat","overrides","Root","style","flexWrap","gap","spacing","threeXS"],"sources":["../../../../src/components/widgets/ButtonGroup/ButtonGroup.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  forwardRef,\n  ReactElement,\n  Ref,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\"\n\nimport { useTheme } from \"@emotion/react\"\nimport isEqual from \"lodash/isEqual\"\nimport { ButtonGroup as BasewebButtonGroup, MODE } from \"baseui/button-group\"\n\nimport BaseButton, {\n  BaseButtonKind,\n  BaseButtonSize,\n} from \"@streamlit/lib/src/components/shared/BaseButton\"\nimport { DynamicIcon } from \"@streamlit/lib/src/components/shared/Icon\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport { ButtonGroup as ButtonGroupProto } from \"@streamlit/lib/src/proto\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form/FormClearHelper\"\n\nexport interface Props {\n  disabled: boolean\n  element: ButtonGroupProto\n  widgetMgr: WidgetStateManager\n  fragmentId?: string\n}\n\nfunction handleMultiSelection(\n  index: number,\n  currentSelection: number[]\n): number[] {\n  if (!currentSelection.includes(index)) {\n    return [...currentSelection, index]\n  }\n  return currentSelection.filter(value => value !== index)\n}\n\nfunction handleSelection(\n  mode: ButtonGroupProto.ClickMode,\n  index: number,\n  currentSelection?: number[]\n): number[] {\n  if (mode == ButtonGroupProto.ClickMode.MULTI_SELECT) {\n    return handleMultiSelection(index, currentSelection ?? [])\n  }\n  return [index]\n}\n\nfunction getSingleSelection(currentSelection: number[]): number {\n  if (currentSelection.length === 0) {\n    return -1\n  }\n  return currentSelection[0]\n}\n\nfunction syncWithWidgetManager(\n  selected: number[],\n  element: ButtonGroupProto,\n  widgetMgr: WidgetStateManager,\n  fragmentId?: string,\n  fromUi = true\n): void {\n  widgetMgr.setIntArrayValue(element, selected, { fromUi: fromUi }, fragmentId)\n}\n\nfunction getContentElement(content: string): ReactElement {\n  return <DynamicIcon size=\"lg\" iconValue={content} />\n}\n\n/**\n * Returns true if the element should be shown as selected (even though its technically not).\n * This is used, for example, to show all elements as selected that come before the actually selected element.\n *\n * @param selectionVisualization sets the visualization mode\n * @param clickMode either SINGLE_SELECT or MULTI_SELECT\n * @param selected list of selected indices. Since only SINGLE_SELECT is considered, this list will always have a length of 1.\n * @param index of the current element\n * @returns true if the element is the selected one, or if click_mode is SINGLE_SELECT and selectionVisualization is set to\n *  ALL_UP_TO_SELECTED and the index of the element is smaller than the index of the selected element, false otherwise.\n */\nfunction showAsSelected(\n  selectionVisualization: ButtonGroupProto.SelectionVisualization,\n  clickMode: ButtonGroupProto.ClickMode,\n  selected: number[],\n  index: number\n): boolean {\n  if (selected.indexOf(index) > -1) {\n    return true\n  }\n\n  if (\n    clickMode !== ButtonGroupProto.ClickMode.SINGLE_SELECT ||\n    selectionVisualization !==\n      ButtonGroupProto.SelectionVisualization.ALL_UP_TO_SELECTED\n  ) {\n    return false\n  }\n\n  return selected.length > 0 && index < selected[0]\n}\n\nfunction getContent(\n  isVisuallySelected: boolean,\n  fallbackContent: string,\n  selectionContent?: string | undefined | null\n): string {\n  if (isVisuallySelected && selectionContent) {\n    return selectionContent\n  }\n\n  return fallbackContent\n}\n\nfunction createOptionChild(\n  option: ButtonGroupProto.IOption,\n  index: number,\n  selectionVisualization: ButtonGroupProto.SelectionVisualization,\n  clickMode: ButtonGroupProto.ClickMode,\n  selected: number[]\n): React.FunctionComponent {\n  const isVisuallySelected = showAsSelected(\n    selectionVisualization,\n    clickMode,\n    selected,\n    index\n  )\n  const content = getContent(\n    isVisuallySelected,\n    option.content ?? \"\",\n    option.selectedContent\n  )\n\n  // we have to use forwardRef here becaused BasewebButtonGroup passes it down to its children\n  const buttonKind =\n    !isVisuallySelected || option.selectedContent || false\n      ? BaseButtonKind.BORDERLESS_ICON\n      : BaseButtonKind.BORDERLESS_ICON_ACTIVE\n  return forwardRef(function BaseButtonGroup(\n    props: any,\n    _: Ref<BasewebButtonGroup>\n  ): ReactElement {\n    return (\n      <BaseButton {...props} size={BaseButtonSize.XSMALL} kind={buttonKind}>\n        {getContentElement(content)}\n      </BaseButton>\n    )\n  })\n}\n\nfunction getInitialValue(\n  widgetMgr: WidgetStateManager,\n  element: ButtonGroupProto\n): number[] {\n  const storedValue = widgetMgr.getIntArrayValue(element)\n  return storedValue ?? element.default\n}\n\nfunction ButtonGroup(props: Readonly<Props>): ReactElement {\n  const { disabled, element, fragmentId, widgetMgr } = props\n  const {\n    clickMode,\n    default: defaultValues,\n    options,\n    value,\n    selectionVisualization,\n  } = element\n\n  const theme: EmotionTheme = useTheme()\n\n  const [selected, setSelected] = useState<number[]>(\n    getInitialValue(widgetMgr, element) || []\n  )\n\n  const elementRef = React.useRef(element)\n  // set to undefined for the first render so we know when its mounted\n  const selectedRef = React.useRef<number[] | undefined>(undefined)\n\n  // This is required for the form clearing functionality:\n  useEffect(() => {\n    if (!element.formId) {\n      // We don't need the form clear functionality if its not in a form\n      // or if selections are not activated.\n      return\n    }\n\n    const formClearHelper = new FormClearHelper()\n    // On form clear, reset the selections (in chart & widget state)\n    formClearHelper.manageFormClearListener(widgetMgr, element.formId, () => {\n      setSelected(defaultValues)\n    })\n\n    return () => {\n      formClearHelper.disconnect()\n    }\n  }, [element.formId, widgetMgr, defaultValues])\n\n  const valueString = useMemo(() => JSON.stringify(value), [value])\n  useEffect(() => {\n    const parsedValue = JSON.parse(valueString)\n    if (elementRef.current.setValue) {\n      setSelected(parsedValue)\n      syncWithWidgetManager(\n        selected,\n        elementRef.current,\n        widgetMgr,\n        fragmentId,\n        false\n      )\n      elementRef.current.setValue = false\n    } else {\n      // only commit to the backend if the value has changed\n      if (isEqual(selected, selectedRef.current)) {\n        return\n      }\n      const fromUi = selectedRef.current === undefined ? false : true\n      syncWithWidgetManager(\n        selected,\n        elementRef.current,\n        widgetMgr,\n        fragmentId,\n        fromUi\n      )\n    }\n    selectedRef.current = selected\n  }, [selected, widgetMgr, fragmentId, valueString])\n\n  const onClick = (\n    _event: React.SyntheticEvent<HTMLButtonElement>,\n    index: number\n  ): void => {\n    const newSelected = handleSelection(clickMode, index, selected)\n    setSelected(newSelected)\n  }\n\n  let mode = undefined\n  if (clickMode === ButtonGroupProto.ClickMode.SINGLE_SELECT) {\n    mode = MODE.radio\n  } else if (clickMode === ButtonGroupProto.ClickMode.MULTI_SELECT) {\n    mode = MODE.checkbox\n  }\n\n  const optionElements = options.map((option, index) => {\n    const Element = createOptionChild(\n      option,\n      index,\n      selectionVisualization,\n      clickMode,\n      selected\n    )\n    return <Element key={`${option.content}-${index}`} />\n  })\n  return (\n    <BasewebButtonGroup\n      disabled={disabled}\n      mode={mode}\n      onClick={onClick}\n      selected={\n        clickMode === ButtonGroupProto.ClickMode.MULTI_SELECT\n          ? selected\n          : getSingleSelection(selected)\n      }\n      overrides={{\n        Root: {\n          style: {\n            flexWrap: \"wrap\",\n            gap: theme.spacing.threeXS,\n          },\n          props: {\n            \"data-testid\": \"stButtonGroup\",\n          },\n        },\n      }}\n    >\n      {optionElements}\n    </BasewebButtonGroup>\n  )\n}\n\nexport default ButtonGroup\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IACVC,UAAU,EAGVC,SAAS,EACTC,OAAO,EACPC,QAAQ,QACH,OAAO;AAEd,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,OAAOC,OAAO,MAAM,gBAAgB;AACpC,SAASC,WAAW,IAAIC,kBAAkB,EAAEC,IAAI,QAAQ,qBAAqB;AAE7E,OAAOC,UAAU,IACfC,cAAc,EACdC,cAAc;AAEhB,SAASC,WAAW;AAEpB,SAASN,WAAW,IAAIO,gBAAgB;AAExC,SAASC,eAAe;AAAoE,SAAAC,GAAA,IAAAC,IAAA;AAS5F,SAASC,oBAAoBA,CAC3BC,KAAa,EACbC,gBAA0B,EAChB;EACV,IAAI,CAACA,gBAAgB,CAACC,QAAQ,CAACF,KAAK,CAAC,EAAE;IACrC,OAAO,CAAC,GAAGC,gBAAgB,EAAED,KAAK,CAAC;EACrC;EACA,OAAOC,gBAAgB,CAACE,MAAM,CAACC,KAAK,IAAIA,KAAK,KAAKJ,KAAK,CAAC;AAC1D;AAEA,SAASK,eAAeA,CACtBC,IAAgC,EAChCN,KAAa,EACbC,gBAA2B,EACjB;EACV,IAAIK,IAAI,IAAIX,gBAAgB,CAACY,SAAS,CAACC,YAAY,EAAE;IACnD,OAAOT,oBAAoB,CAACC,KAAK,EAAEC,gBAAgB,aAAhBA,gBAAgB,cAAhBA,gBAAgB,GAAI,EAAE,CAAC;EAC5D;EACA,OAAO,CAACD,KAAK,CAAC;AAChB;AAEA,SAASS,kBAAkBA,CAACR,gBAA0B,EAAU;EAC9D,IAAIA,gBAAgB,CAACS,MAAM,KAAK,CAAC,EAAE;IACjC,OAAO,CAAC,CAAC;EACX;EACA,OAAOT,gBAAgB,CAAC,CAAC,CAAC;AAC5B;AAEA,SAASU,qBAAqBA,CAC5BC,QAAkB,EAClBC,OAAyB,EACzBC,SAA6B,EAC7BC,UAAmB,EAEb;EAAA,IADNC,MAAM,GAAAC,SAAA,CAAAP,MAAA,QAAAO,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,IAAI;EAEbH,SAAS,CAACK,gBAAgB,CAACN,OAAO,EAAED,QAAQ,EAAE;IAAEI,MAAM,EAAEA;EAAO,CAAC,EAAED,UAAU,CAAC;AAC/E;AAEA,SAASK,iBAAiBA,CAACC,OAAe,EAAgB;EACxD,oBAAOvB,IAAA,CAACJ,WAAW;IAAC4B,IAAI,EAAC,IAAI;IAACC,SAAS,EAAEF;EAAQ,CAAE,CAAC;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,cAAcA,CACrBC,sBAA+D,EAC/DC,SAAqC,EACrCd,QAAkB,EAClBZ,KAAa,EACJ;EACT,IAAIY,QAAQ,CAACe,OAAO,CAAC3B,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE;IAChC,OAAO,IAAI;EACb;EAEA,IACE0B,SAAS,KAAK/B,gBAAgB,CAACY,SAAS,CAACqB,aAAa,IACtDH,sBAAsB,KACpB9B,gBAAgB,CAACkC,sBAAsB,CAACC,kBAAkB,EAC5D;IACA,OAAO,KAAK;EACd;EAEA,OAAOlB,QAAQ,CAACF,MAAM,GAAG,CAAC,IAAIV,KAAK,GAAGY,QAAQ,CAAC,CAAC,CAAC;AACnD;AAEA,SAASmB,UAAUA,CACjBC,kBAA2B,EAC3BC,eAAuB,EACvBC,gBAA4C,EACpC;EACR,IAAIF,kBAAkB,IAAIE,gBAAgB,EAAE;IAC1C,OAAOA,gBAAgB;EACzB;EAEA,OAAOD,eAAe;AACxB;AAEA,SAASE,iBAAiBA,CACxBC,MAAgC,EAChCpC,KAAa,EACbyB,sBAA+D,EAC/DC,SAAqC,EACrCd,QAAkB,EACO;EAAA,IAAAyB,eAAA;EACzB,MAAML,kBAAkB,GAAGR,cAAc,CACvCC,sBAAsB,EACtBC,SAAS,EACTd,QAAQ,EACRZ,KACF,CAAC;EACD,MAAMqB,OAAO,GAAGU,UAAU,CACxBC,kBAAkB,GAAAK,eAAA,GAClBD,MAAM,CAACf,OAAO,cAAAgB,eAAA,cAAAA,eAAA,GAAI,EAAE,EACpBD,MAAM,CAACE,eACT,CAAC;;EAED;EACA,MAAMC,UAAU,GACd,CAACP,kBAAkB,IAAII,MAAM,CAACE,eAAe,IAAI,KAAK,GAClD9C,cAAc,CAACgD,eAAe,GAC9BhD,cAAc,CAACiD,sBAAsB;EAC3C,oBAAO3D,UAAU,CAAC,SAAS4D,eAAeA,CACxCC,KAAU,EACVC,CAA0B,EACZ;IACd,oBACE9C,IAAA,CAACP,UAAU;MAAA,GAAKoD,KAAK;MAAErB,IAAI,EAAE7B,cAAc,CAACoD,MAAO;MAACC,IAAI,EAAEP,UAAW;MAAAQ,QAAA,EAClE3B,iBAAiB,CAACC,OAAO;IAAC,CACjB,CAAC;EAEjB,CAAC,CAAC;AACJ;AAEA,SAAS2B,eAAeA,CACtBlC,SAA6B,EAC7BD,OAAyB,EACf;EACV,MAAMoC,WAAW,GAAGnC,SAAS,CAACoC,gBAAgB,CAACrC,OAAO,CAAC;EACvD,OAAOoC,WAAW,aAAXA,WAAW,cAAXA,WAAW,GAAIpC,OAAO,CAACsC,OAAO;AACvC;AAEA,SAAS/D,WAAWA,CAACuD,KAAsB,EAAgB;EACzD,MAAM;IAAES,QAAQ;IAAEvC,OAAO;IAAEE,UAAU;IAAED;EAAU,CAAC,GAAG6B,KAAK;EAC1D,MAAM;IACJjB,SAAS;IACTyB,OAAO,EAAEE,aAAa;IACtBC,OAAO;IACPlD,KAAK;IACLqB;EACF,CAAC,GAAGZ,OAAO;EAEX,MAAM0C,KAAmB,GAAGrE,QAAQ,CAAC,CAAC;EAEtC,MAAM,CAAC0B,QAAQ,EAAE4C,WAAW,CAAC,GAAGvE,QAAQ,CACtC+D,eAAe,CAAClC,SAAS,EAAED,OAAO,CAAC,IAAI,EACzC,CAAC;EAED,MAAM4C,UAAU,GAAG5E,KAAK,CAAC6E,MAAM,CAAC7C,OAAO,CAAC;EACxC;EACA,MAAM8C,WAAW,GAAG9E,KAAK,CAAC6E,MAAM,CAAuBxC,SAAS,CAAC;;EAEjE;EACAnC,SAAS,CAAC,MAAM;IACd,IAAI,CAAC8B,OAAO,CAAC+C,MAAM,EAAE;MACnB;MACA;MACA;IACF;IAEA,MAAMC,eAAe,GAAG,IAAIjE,eAAe,CAAC,CAAC;IAC7C;IACAiE,eAAe,CAACC,uBAAuB,CAAChD,SAAS,EAAED,OAAO,CAAC+C,MAAM,EAAE,MAAM;MACvEJ,WAAW,CAACH,aAAa,CAAC;IAC5B,CAAC,CAAC;IAEF,OAAO,MAAM;MACXQ,eAAe,CAACE,UAAU,CAAC,CAAC;IAC9B,CAAC;EACH,CAAC,EAAE,CAAClD,OAAO,CAAC+C,MAAM,EAAE9C,SAAS,EAAEuC,aAAa,CAAC,CAAC;EAE9C,MAAMW,WAAW,GAAGhF,OAAO,CAAC,MAAMiF,IAAI,CAACC,SAAS,CAAC9D,KAAK,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EACjErB,SAAS,CAAC,MAAM;IACd,MAAMoF,WAAW,GAAGF,IAAI,CAACG,KAAK,CAACJ,WAAW,CAAC;IAC3C,IAAIP,UAAU,CAACY,OAAO,CAACC,QAAQ,EAAE;MAC/Bd,WAAW,CAACW,WAAW,CAAC;MACxBxD,qBAAqB,CACnBC,QAAQ,EACR6C,UAAU,CAACY,OAAO,EAClBvD,SAAS,EACTC,UAAU,EACV,KACF,CAAC;MACD0C,UAAU,CAACY,OAAO,CAACC,QAAQ,GAAG,KAAK;IACrC,CAAC,MAAM;MACL;MACA,IAAInF,OAAO,CAACyB,QAAQ,EAAE+C,WAAW,CAACU,OAAO,CAAC,EAAE;QAC1C;MACF;MACA,MAAMrD,MAAM,GAAG2C,WAAW,CAACU,OAAO,KAAKnD,SAAS,GAAG,KAAK,GAAG,IAAI;MAC/DP,qBAAqB,CACnBC,QAAQ,EACR6C,UAAU,CAACY,OAAO,EAClBvD,SAAS,EACTC,UAAU,EACVC,MACF,CAAC;IACH;IACA2C,WAAW,CAACU,OAAO,GAAGzD,QAAQ;EAChC,CAAC,EAAE,CAACA,QAAQ,EAAEE,SAAS,EAAEC,UAAU,EAAEiD,WAAW,CAAC,CAAC;EAElD,MAAMO,OAAO,GAAGA,CACdC,MAA+C,EAC/CxE,KAAa,KACJ;IACT,MAAMyE,WAAW,GAAGpE,eAAe,CAACqB,SAAS,EAAE1B,KAAK,EAAEY,QAAQ,CAAC;IAC/D4C,WAAW,CAACiB,WAAW,CAAC;EAC1B,CAAC;EAED,IAAInE,IAAI,GAAGY,SAAS;EACpB,IAAIQ,SAAS,KAAK/B,gBAAgB,CAACY,SAAS,CAACqB,aAAa,EAAE;IAC1DtB,IAAI,GAAGhB,IAAI,CAACoF,KAAK;EACnB,CAAC,MAAM,IAAIhD,SAAS,KAAK/B,gBAAgB,CAACY,SAAS,CAACC,YAAY,EAAE;IAChEF,IAAI,GAAGhB,IAAI,CAACqF,QAAQ;EACtB;EAEA,MAAMC,cAAc,GAAGtB,OAAO,CAACuB,GAAG,CAAC,CAACzC,MAAM,EAAEpC,KAAK,KAAK;IACpD,MAAM8E,OAAO,GAAG3C,iBAAiB,CAC/BC,MAAM,EACNpC,KAAK,EACLyB,sBAAsB,EACtBC,SAAS,EACTd,QACF,CAAC;IACD,oBAAOd,IAAA,CAACgF,OAAO,SAAAC,MAAA,CAAS3C,MAAM,CAACf,OAAO,OAAA0D,MAAA,CAAI/E,KAAK,CAAK,CAAC;EACvD,CAAC,CAAC;EACF,oBACEF,IAAA,CAACT,kBAAkB;IACjB+D,QAAQ,EAAEA,QAAS;IACnB9C,IAAI,EAAEA,IAAK;IACXiE,OAAO,EAAEA,OAAQ;IACjB3D,QAAQ,EACNc,SAAS,KAAK/B,gBAAgB,CAACY,SAAS,CAACC,YAAY,GACjDI,QAAQ,GACRH,kBAAkB,CAACG,QAAQ,CAChC;IACDoE,SAAS,EAAE;MACTC,IAAI,EAAE;QACJC,KAAK,EAAE;UACLC,QAAQ,EAAE,MAAM;UAChBC,GAAG,EAAE7B,KAAK,CAAC8B,OAAO,CAACC;QACrB,CAAC;QACD3C,KAAK,EAAE;UACL,aAAa,EAAE;QACjB;MACF;IACF,CAAE;IAAAI,QAAA,EAED6B;EAAc,CACG,CAAC;AAEzB;AAEA,eAAexF,WAAW"}