import _styled from "@emotion/styled/base";
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { StyledCheckbox } from "../../widgets/Checkbox/styled-components";
import { Block as BlockProto } from "../../../proto";
function translateGapWidth(gap, theme) {
  let gapWidth = theme.spacing.lg;
  if (gap === "medium") {
    gapWidth = theme.spacing.threeXL;
  } else if (gap === "large") {
    gapWidth = theme.spacing.fourXL;
  }
  return gapWidth;
}
export const StyledHorizontalBlock = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1f1d6gn5"
} : {
  target: "e1f1d6gn5",
  label: "StyledHorizontalBlock"
})(_ref => {
  let {
    theme,
    gap
  } = _ref;
  const gapWidth = translateGapWidth(gap, theme);
  return {
    // While using flex for columns, padding is used for large screens and gap
    // for small ones. This can be adjusted once more information is passed.
    // More information and discussions can be found: Issue #2716, PR #2811
    display: "flex",
    flexWrap: "wrap",
    flexGrow: 1,
    alignItems: "stretch",
    gap: gapWidth
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const GLOBAL_ELEMENTS = ["balloons", "snow"];
export const StyledElementContainer = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1f1d6gn4"
} : {
  target: "e1f1d6gn4",
  label: "StyledElementContainer"
})(_ref2 => {
  let {
    theme,
    isStale,
    width,
    elementType
  } = _ref2;
  return {
    width,
    // Allows to have absolutely-positioned nodes inside app elements, like
    // floating buttons.
    position: "relative",
    "@media print": {
      "@-moz-document url-prefix()": {
        display: "block"
      },
      overflow: "visible"
    },
    ":is(.empty-html)": {
      display: "none"
    },
    ":has(> .cacheSpinner)": {
      height: 0,
      overflow: "visible",
      visibility: "visible",
      marginBottom: "-1rem",
      zIndex: 1000
    },
    ":has(> .stPageLink)": {
      marginTop: "-0.375rem",
      marginBottom: "-0.375rem"
    },
    // Lower the min height of stacked/grouped checkboxes to have them appear visually
    // closer together to each other.
    // To detect & cover all grouped/stacked checkboxes, we apply a complex CSS selector
    // that selects all checkboxes that are directly followed by another checkbox.
    // Since the last checkbox in a group isn't followed by another checkbox, we also
    // need to target the direct sibling (if it is a checkbox) of any of the targeted checkboxes.
    // Examples:
    // Smaller width is not applied because single checkbox:
    // <text-input><checkbox><number-input>
    // Smaller width is applied to all checkboxes:
    // <text-input><checkbox><checkbox><checkbox><number-input>
    // Smaller width only applied to the first two checkboxes:
    // <text-input><checkbox><checkbox><number-input><checkbox><selectbox>
    ["&:has(+ & > ".concat(StyledCheckbox, ") > ").concat(StyledCheckbox, ", &:has(> ").concat(StyledCheckbox, "):has(+ & > ").concat(StyledCheckbox, ") + & > ").concat(StyledCheckbox)]: {
      minHeight: "1.5rem"
    },
    ...(isStale && elementType !== "skeleton" ? {
      opacity: 0.33,
      transition: "opacity 1s ease-in 0.5s"
    } : {}),
    ...(elementType === "empty" ? {
      // Use display: none for empty elements to avoid the flexbox gap.
      display: "none"
    } : {}),
    ...(GLOBAL_ELEMENTS.includes(elementType) ? {
      // Global elements are rendered in their delta position, but they
      // are not part of the flexbox layout. We apply a negative margin
      // to remove the flexbox gap. display: none does not work for these,
      // since they needs to be visible.
      marginBottom: "-".concat(theme.spacing.lg)
    } : {})
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const StyledColumn = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1f1d6gn3"
} : {
  target: "e1f1d6gn3",
  label: "StyledColumn"
})(_ref3 => {
  let {
    weight,
    gap,
    theme,
    verticalAlignment
  } = _ref3;
  const {
    VerticalAlignment
  } = BlockProto.Column;
  const percentage = weight * 100;
  const gapWidth = translateGapWidth(gap, theme);
  const width = "calc(".concat(percentage, "% - ").concat(gapWidth, ")");
  return {
    // Calculate width based on percentage, but fill all available space,
    // e.g. if it overflows to next row.
    width,
    flex: "1 1 ".concat(width),
    ["@media (max-width: ".concat(theme.breakpoints.columns, ")")]: {
      minWidth: "calc(100% - ".concat(theme.spacing.twoXL, ")")
    },
    ...(verticalAlignment === VerticalAlignment.BOTTOM && {
      marginTop: "auto"
    }),
    ...(verticalAlignment === VerticalAlignment.CENTER && {
      marginTop: "auto",
      marginBottom: "auto"
    })
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const StyledVerticalBlock = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1f1d6gn2"
} : {
  target: "e1f1d6gn2",
  label: "StyledVerticalBlock"
})(_ref4 => {
  let {
    width,
    theme
  } = _ref4;
  return {
    width,
    position: "relative",
    // Required for the automatic width computation.
    display: "flex",
    flex: 1,
    flexDirection: "column",
    gap: theme.spacing.lg
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const StyledVerticalBlockWrapper = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1f1d6gn1"
} : {
  target: "e1f1d6gn1",
  label: "StyledVerticalBlockWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "1wmy9hl",
  styles: "display:flex;flex-direction:column;flex:1"
} : {
  name: "1wmy9hl",
  styles: "display:flex;flex-direction:column;flex:1",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2NvcmUvQmxvY2svc3R5bGVkLWNvbXBvbmVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0wwQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9jb3JlL0Jsb2NrL3N0eWxlZC1jb21wb25lbnRzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFN0cmVhbWxpdCBJbmMuICgyMDE4LTIwMjIpIFNub3dmbGFrZSBJbmMuICgyMDIyLTIwMjQpXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIlxuXG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIlxuXG5pbXBvcnQgeyBFbW90aW9uVGhlbWUgfSBmcm9tIFwiQHN0cmVhbWxpdC9saWIvc3JjL3RoZW1lXCJcbmltcG9ydCB7IFN0eWxlZENoZWNrYm94IH0gZnJvbSBcIkBzdHJlYW1saXQvbGliL3NyYy9jb21wb25lbnRzL3dpZGdldHMvQ2hlY2tib3gvc3R5bGVkLWNvbXBvbmVudHNcIlxuaW1wb3J0IHsgQmxvY2sgYXMgQmxvY2tQcm90byB9IGZyb20gXCJAc3RyZWFtbGl0L2xpYi9zcmMvcHJvdG9cIlxuXG5mdW5jdGlvbiB0cmFuc2xhdGVHYXBXaWR0aChnYXA6IHN0cmluZywgdGhlbWU6IEVtb3Rpb25UaGVtZSk6IHN0cmluZyB7XG4gIGxldCBnYXBXaWR0aCA9IHRoZW1lLnNwYWNpbmcubGdcbiAgaWYgKGdhcCA9PT0gXCJtZWRpdW1cIikge1xuICAgIGdhcFdpZHRoID0gdGhlbWUuc3BhY2luZy50aHJlZVhMXG4gIH0gZWxzZSBpZiAoZ2FwID09PSBcImxhcmdlXCIpIHtcbiAgICBnYXBXaWR0aCA9IHRoZW1lLnNwYWNpbmcuZm91clhMXG4gIH1cbiAgcmV0dXJuIGdhcFdpZHRoXG59XG5leHBvcnQgaW50ZXJmYWNlIFN0eWxlZEhvcml6b250YWxCbG9ja1Byb3BzIHtcbiAgZ2FwOiBzdHJpbmdcbn1cblxuZXhwb3J0IGNvbnN0IFN0eWxlZEhvcml6b250YWxCbG9jayA9IHN0eWxlZC5kaXY8U3R5bGVkSG9yaXpvbnRhbEJsb2NrUHJvcHM+KFxuICAoeyB0aGVtZSwgZ2FwIH0pID0+IHtcbiAgICBjb25zdCBnYXBXaWR0aCA9IHRyYW5zbGF0ZUdhcFdpZHRoKGdhcCwgdGhlbWUpXG5cbiAgICByZXR1cm4ge1xuICAgICAgLy8gV2hpbGUgdXNpbmcgZmxleCBmb3IgY29sdW1ucywgcGFkZGluZyBpcyB1c2VkIGZvciBsYXJnZSBzY3JlZW5zIGFuZCBnYXBcbiAgICAgIC8vIGZvciBzbWFsbCBvbmVzLiBUaGlzIGNhbiBiZSBhZGp1c3RlZCBvbmNlIG1vcmUgaW5mb3JtYXRpb24gaXMgcGFzc2VkLlxuICAgICAgLy8gTW9yZSBpbmZvcm1hdGlvbiBhbmQgZGlzY3Vzc2lvbnMgY2FuIGJlIGZvdW5kOiBJc3N1ZSAjMjcxNiwgUFIgIzI4MTFcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgZmxleFdyYXA6IFwid3JhcFwiLFxuICAgICAgZmxleEdyb3c6IDEsXG4gICAgICBhbGlnbkl0ZW1zOiBcInN0cmV0Y2hcIixcbiAgICAgIGdhcDogZ2FwV2lkdGgsXG4gICAgfVxuICB9XG4pXG5cbmV4cG9ydCBpbnRlcmZhY2UgU3R5bGVkRWxlbWVudENvbnRhaW5lclByb3BzIHtcbiAgaXNTdGFsZTogYm9vbGVhblxuICB3aWR0aDogbnVtYmVyXG4gIGVsZW1lbnRUeXBlOiBzdHJpbmdcbn1cblxuY29uc3QgR0xPQkFMX0VMRU1FTlRTID0gW1wiYmFsbG9vbnNcIiwgXCJzbm93XCJdXG5leHBvcnQgY29uc3QgU3R5bGVkRWxlbWVudENvbnRhaW5lciA9IHN0eWxlZC5kaXY8U3R5bGVkRWxlbWVudENvbnRhaW5lclByb3BzPihcbiAgKHsgdGhlbWUsIGlzU3RhbGUsIHdpZHRoLCBlbGVtZW50VHlwZSB9KSA9PiAoe1xuICAgIHdpZHRoLFxuICAgIC8vIEFsbG93cyB0byBoYXZlIGFic29sdXRlbHktcG9zaXRpb25lZCBub2RlcyBpbnNpZGUgYXBwIGVsZW1lbnRzLCBsaWtlXG4gICAgLy8gZmxvYXRpbmcgYnV0dG9ucy5cbiAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuXG4gICAgXCJAbWVkaWEgcHJpbnRcIjoge1xuICAgICAgXCJALW1vei1kb2N1bWVudCB1cmwtcHJlZml4KClcIjoge1xuICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICB9LFxuICAgICAgb3ZlcmZsb3c6IFwidmlzaWJsZVwiLFxuICAgIH0sXG5cbiAgICBcIjppcyguZW1wdHktaHRtbClcIjoge1xuICAgICAgZGlzcGxheTogXCJub25lXCIsXG4gICAgfSxcblxuICAgIFwiOmhhcyg+IC5jYWNoZVNwaW5uZXIpXCI6IHtcbiAgICAgIGhlaWdodDogMCxcbiAgICAgIG92ZXJmbG93OiBcInZpc2libGVcIixcbiAgICAgIHZpc2liaWxpdHk6IFwidmlzaWJsZVwiLFxuICAgICAgbWFyZ2luQm90dG9tOiBcIi0xcmVtXCIsXG4gICAgICB6SW5kZXg6IDEwMDAsXG4gICAgfSxcblxuICAgIFwiOmhhcyg+IC5zdFBhZ2VMaW5rKVwiOiB7XG4gICAgICBtYXJnaW5Ub3A6IFwiLTAuMzc1cmVtXCIsXG4gICAgICBtYXJnaW5Cb3R0b206IFwiLTAuMzc1cmVtXCIsXG4gICAgfSxcbiAgICAvLyBMb3dlciB0aGUgbWluIGhlaWdodCBvZiBzdGFja2VkL2dyb3VwZWQgY2hlY2tib3hlcyB0byBoYXZlIHRoZW0gYXBwZWFyIHZpc3VhbGx5XG4gICAgLy8gY2xvc2VyIHRvZ2V0aGVyIHRvIGVhY2ggb3RoZXIuXG4gICAgLy8gVG8gZGV0ZWN0ICYgY292ZXIgYWxsIGdyb3VwZWQvc3RhY2tlZCBjaGVja2JveGVzLCB3ZSBhcHBseSBhIGNvbXBsZXggQ1NTIHNlbGVjdG9yXG4gICAgLy8gdGhhdCBzZWxlY3RzIGFsbCBjaGVja2JveGVzIHRoYXQgYXJlIGRpcmVjdGx5IGZvbGxvd2VkIGJ5IGFub3RoZXIgY2hlY2tib3guXG4gICAgLy8gU2luY2UgdGhlIGxhc3QgY2hlY2tib3ggaW4gYSBncm91cCBpc24ndCBmb2xsb3dlZCBieSBhbm90aGVyIGNoZWNrYm94LCB3ZSBhbHNvXG4gICAgLy8gbmVlZCB0byB0YXJnZXQgdGhlIGRpcmVjdCBzaWJsaW5nIChpZiBpdCBpcyBhIGNoZWNrYm94KSBvZiBhbnkgb2YgdGhlIHRhcmdldGVkIGNoZWNrYm94ZXMuXG4gICAgLy8gRXhhbXBsZXM6XG4gICAgLy8gU21hbGxlciB3aWR0aCBpcyBub3QgYXBwbGllZCBiZWNhdXNlIHNpbmdsZSBjaGVja2JveDpcbiAgICAvLyA8dGV4dC1pbnB1dD48Y2hlY2tib3g+PG51bWJlci1pbnB1dD5cbiAgICAvLyBTbWFsbGVyIHdpZHRoIGlzIGFwcGxpZWQgdG8gYWxsIGNoZWNrYm94ZXM6XG4gICAgLy8gPHRleHQtaW5wdXQ+PGNoZWNrYm94PjxjaGVja2JveD48Y2hlY2tib3g+PG51bWJlci1pbnB1dD5cbiAgICAvLyBTbWFsbGVyIHdpZHRoIG9ubHkgYXBwbGllZCB0byB0aGUgZmlyc3QgdHdvIGNoZWNrYm94ZXM6XG4gICAgLy8gPHRleHQtaW5wdXQ+PGNoZWNrYm94PjxjaGVja2JveD48bnVtYmVyLWlucHV0PjxjaGVja2JveD48c2VsZWN0Ym94PlxuICAgIFtgJjpoYXMoKyAmID4gJHtTdHlsZWRDaGVja2JveH0pID4gJHtTdHlsZWRDaGVja2JveH0sICY6aGFzKD4gJHtTdHlsZWRDaGVja2JveH0pOmhhcygrICYgPiAke1N0eWxlZENoZWNrYm94fSkgKyAmID4gJHtTdHlsZWRDaGVja2JveH1gXTpcbiAgICAgIHtcbiAgICAgICAgbWluSGVpZ2h0OiBcIjEuNXJlbVwiLFxuICAgICAgfSxcblxuICAgIC4uLihpc1N0YWxlICYmIGVsZW1lbnRUeXBlICE9PSBcInNrZWxldG9uXCJcbiAgICAgID8ge1xuICAgICAgICAgIG9wYWNpdHk6IDAuMzMsXG4gICAgICAgICAgdHJhbnNpdGlvbjogXCJvcGFjaXR5IDFzIGVhc2UtaW4gMC41c1wiLFxuICAgICAgICB9XG4gICAgICA6IHt9KSxcbiAgICAuLi4oZWxlbWVudFR5cGUgPT09IFwiZW1wdHlcIlxuICAgICAgPyB7XG4gICAgICAgICAgLy8gVXNlIGRpc3BsYXk6IG5vbmUgZm9yIGVtcHR5IGVsZW1lbnRzIHRvIGF2b2lkIHRoZSBmbGV4Ym94IGdhcC5cbiAgICAgICAgICBkaXNwbGF5OiBcIm5vbmVcIixcbiAgICAgICAgfVxuICAgICAgOiB7fSksXG4gICAgLi4uKEdMT0JBTF9FTEVNRU5UUy5pbmNsdWRlcyhlbGVtZW50VHlwZSlcbiAgICAgID8ge1xuICAgICAgICAgIC8vIEdsb2JhbCBlbGVtZW50cyBhcmUgcmVuZGVyZWQgaW4gdGhlaXIgZGVsdGEgcG9zaXRpb24sIGJ1dCB0aGV5XG4gICAgICAgICAgLy8gYXJlIG5vdCBwYXJ0IG9mIHRoZSBmbGV4Ym94IGxheW91dC4gV2UgYXBwbHkgYSBuZWdhdGl2ZSBtYXJnaW5cbiAgICAgICAgICAvLyB0byByZW1vdmUgdGhlIGZsZXhib3ggZ2FwLiBkaXNwbGF5OiBub25lIGRvZXMgbm90IHdvcmsgZm9yIHRoZXNlLFxuICAgICAgICAgIC8vIHNpbmNlIHRoZXkgbmVlZHMgdG8gYmUgdmlzaWJsZS5cbiAgICAgICAgICBtYXJnaW5Cb3R0b206IGAtJHt0aGVtZS5zcGFjaW5nLmxnfWAsXG4gICAgICAgIH1cbiAgICAgIDoge30pLFxuICB9KVxuKVxuXG5pbnRlcmZhY2UgU3R5bGVkQ29sdW1uUHJvcHMge1xuICB3ZWlnaHQ6IG51bWJlclxuICBnYXA6IHN0cmluZ1xuICB2ZXJ0aWNhbEFsaWdubWVudD86IEJsb2NrUHJvdG8uQ29sdW1uLlZlcnRpY2FsQWxpZ25tZW50XG59XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRDb2x1bW4gPSBzdHlsZWQuZGl2PFN0eWxlZENvbHVtblByb3BzPihcbiAgKHsgd2VpZ2h0LCBnYXAsIHRoZW1lLCB2ZXJ0aWNhbEFsaWdubWVudCB9KSA9PiB7XG4gICAgY29uc3QgeyBWZXJ0aWNhbEFsaWdubWVudCB9ID0gQmxvY2tQcm90by5Db2x1bW5cbiAgICBjb25zdCBwZXJjZW50YWdlID0gd2VpZ2h0ICogMTAwXG4gICAgY29uc3QgZ2FwV2lkdGggPSB0cmFuc2xhdGVHYXBXaWR0aChnYXAsIHRoZW1lKVxuICAgIGNvbnN0IHdpZHRoID0gYGNhbGMoJHtwZXJjZW50YWdlfSUgLSAke2dhcFdpZHRofSlgXG5cbiAgICByZXR1cm4ge1xuICAgICAgLy8gQ2FsY3VsYXRlIHdpZHRoIGJhc2VkIG9uIHBlcmNlbnRhZ2UsIGJ1dCBmaWxsIGFsbCBhdmFpbGFibGUgc3BhY2UsXG4gICAgICAvLyBlLmcuIGlmIGl0IG92ZXJmbG93cyB0byBuZXh0IHJvdy5cbiAgICAgIHdpZHRoLFxuICAgICAgZmxleDogYDEgMSAke3dpZHRofWAsXG5cbiAgICAgIFtgQG1lZGlhIChtYXgtd2lkdGg6ICR7dGhlbWUuYnJlYWtwb2ludHMuY29sdW1uc30pYF06IHtcbiAgICAgICAgbWluV2lkdGg6IGBjYWxjKDEwMCUgLSAke3RoZW1lLnNwYWNpbmcudHdvWEx9KWAsXG4gICAgICB9LFxuICAgICAgLi4uKHZlcnRpY2FsQWxpZ25tZW50ID09PSBWZXJ0aWNhbEFsaWdubWVudC5CT1RUT00gJiYge1xuICAgICAgICBtYXJnaW5Ub3A6IFwiYXV0b1wiLFxuICAgICAgfSksXG4gICAgICAuLi4odmVydGljYWxBbGlnbm1lbnQgPT09IFZlcnRpY2FsQWxpZ25tZW50LkNFTlRFUiAmJiB7XG4gICAgICAgIG1hcmdpblRvcDogXCJhdXRvXCIsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogXCJhdXRvXCIsXG4gICAgICB9KSxcbiAgICB9XG4gIH1cbilcblxuZXhwb3J0IGludGVyZmFjZSBTdHlsZWRWZXJ0aWNhbEJsb2NrUHJvcHMge1xuICByZWY/OiBSZWFjdC5SZWZPYmplY3Q8YW55PlxuICB3aWR0aD86IG51bWJlclxufVxuXG5leHBvcnQgY29uc3QgU3R5bGVkVmVydGljYWxCbG9jayA9IHN0eWxlZC5kaXY8U3R5bGVkVmVydGljYWxCbG9ja1Byb3BzPihcbiAgKHsgd2lkdGgsIHRoZW1lIH0pID0+ICh7XG4gICAgd2lkdGgsXG4gICAgcG9zaXRpb246IFwicmVsYXRpdmVcIiwgLy8gUmVxdWlyZWQgZm9yIHRoZSBhdXRvbWF0aWMgd2lkdGggY29tcHV0YXRpb24uXG4gICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgZmxleDogMSxcbiAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgIGdhcDogdGhlbWUuc3BhY2luZy5sZyxcbiAgfSlcbilcblxuZXhwb3J0IGNvbnN0IFN0eWxlZFZlcnRpY2FsQmxvY2tXcmFwcGVyID0gc3R5bGVkLmRpdjxTdHlsZWRWZXJ0aWNhbEJsb2NrUHJvcHM+KFxuICB7XG4gICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICBmbGV4OiAxLFxuICB9XG4pXG5cbmV4cG9ydCBpbnRlcmZhY2UgU3R5bGVkVmVydGljYWxCbG9ja0JvcmRlcldyYXBwZXJQcm9wcyB7XG4gIGJvcmRlcjogYm9vbGVhblxuICBoZWlnaHQ/OiBudW1iZXJcbn1cblxuZXhwb3J0IGNvbnN0IFN0eWxlZFZlcnRpY2FsQmxvY2tCb3JkZXJXcmFwcGVyID1cbiAgc3R5bGVkLmRpdjxTdHlsZWRWZXJ0aWNhbEJsb2NrQm9yZGVyV3JhcHBlclByb3BzPihcbiAgICAoeyB0aGVtZSwgYm9yZGVyLCBoZWlnaHQgfSkgPT4gKHtcbiAgICAgIC4uLihib3JkZXIgJiYge1xuICAgICAgICBib3JkZXI6IGAke3RoZW1lLnNpemVzLmJvcmRlcldpZHRofSBzb2xpZCAke3RoZW1lLmNvbG9ycy5mYWRlZFRleHQxMH1gLFxuICAgICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnJhZGlpLmRlZmF1bHQsXG4gICAgICAgIHBhZGRpbmc6IGBjYWxjKCR7dGhlbWUuc3BhY2luZy5sZ30gLSAxcHgpYCwgLy8gMXB4IHRvIGFjY291bnQgZm9yIGJvcmRlci5cbiAgICAgIH0pLFxuICAgICAgLi4uKGhlaWdodCAmJiB7XG4gICAgICAgIGhlaWdodDogYCR7aGVpZ2h0fXB4YCxcbiAgICAgICAgb3ZlcmZsb3c6IFwiYXV0b1wiLFxuICAgICAgfSksXG4gICAgfSlcbiAgKVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
export const StyledVerticalBlockBorderWrapper = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1f1d6gn0"
} : {
  target: "e1f1d6gn0",
  label: "StyledVerticalBlockBorderWrapper"
})(_ref5 => {
  let {
    theme,
    border,
    height
  } = _ref5;
  return {
    ...(border && {
      border: "".concat(theme.sizes.borderWidth, " solid ").concat(theme.colors.fadedText10),
      borderRadius: theme.radii.default,
      padding: "calc(".concat(theme.spacing.lg, " - 1px)") // 1px to account for border.
    }),
    ...(height && {
      height: "".concat(height, "px"),
      overflow: "auto"
    })
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
//# sourceMappingURL=styled-components.js.map